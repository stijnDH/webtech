#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('QnA_Webtech:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/qna-webtech');

Question = require('../models/question');
Comment = require('../models/comment');
UserCount = require('../models/usercount');


var server = http.createServer(app);

// SOCKETS 
var io = require('socket.io')(server);

io.on('connection', function (socket) {

  socket.on('question', function (data) {
    var q = new Question(data);
    q.save(function(err, data){
      console.log(err);
      console.log(data);

      io.sockets.emit("questionupdate", data);
    })

  });

  socket.on('comment', function (data) {
    var c = new Comment(data);

    c.save(function(err, data){
      console.log(err);
      console.log(data);

      io.sockets.emit("commentupdate", data);
    })

  });
});

io.on('connect', function(socket){

  socket.on('questionlijst', function (data) {
    var uc = new UserCount(data);
    uc.save(function(err, data){
      console.log(err);
      console.log(data);

      UserCount.find({discID: data.discID})
      .exec(function(err, users){
        io.sockets.emit("usercountupdate", users);
      });
    })
    Question.find({discID: data.discID})
    .exec(function(err, questions){
      socket.emit('questionstart', questions);
    });

    socket.on('disconnect', function () {
      console.log('disconnected');
      console.log(data.discID + " " + data.username);
      UserCount.remove({
        "username": data.username
    },function(){
      UserCount.find({discID: data.discID})
      .exec(function(err, users){
        io.sockets.emit("usercountupdate", users);
      });
    });
    });


  } );

  socket.on('commentlijst', function (data) {
  var uc = new UserCount(data);
      uc.save(function(err, data){
        console.log(err);
        console.log(data);

        UserCount.find({discID: data.discID})
        .exec(function(err, users){
          io.sockets.emit("usercountupdate", users);
        });
      })
    Comment.find({questionID: data.questionID})
    .exec(function(err, comments){
      socket.emit('commentstart', comments);
    });

    socket.on('disconnect', function () {
      console.log('disconnected');
      console.log(data.discID + " " + data.username);
      UserCount.remove({
        "username": data.username
    },function(){
      UserCount.find({discID: data.discID})
      .exec(function(err, users){
        io.sockets.emit("usercountupdate", users);
      });
    });
    });

  } );

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
